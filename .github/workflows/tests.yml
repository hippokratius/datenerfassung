name: Tests

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:

env:
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
  POSTGRES_DB: datenwerft

jobs:
  tests:
    name: Tests on all apps
    runs-on: ubuntu-latest
    services:
      openldap:
        image: bitnami/openldap:latest
        env:
          LDAP_ROOT: dc=example,dc=org
          LDAP_ADMIN_USERNAME: admin
          LDAP_ADMIN_PASSWORD: password
          LDAP_USERS: user01,user02
          LDAP_PASSWORDS: password1,password2
        ports:
          - 1389:1389
      postgres:
        image: postgis/postgis
        env:
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready 
          --health-interval 10s 
          --health-timeout 5s 
          --health-retries 5
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
      - name: Install prerequisites for Python dependencies
        run: sudo apt-get install gdal-bin libgdal-dev libldap2-dev libpq-dev libsasl2-dev postgresql-client
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Create further settings file based on corresponding template
        run: cp datenwerft/secrets.template datenwerft/secrets.py
      - name: Create database schema for app datenmanagement
        env:
          PGPASSWORD: ${{ env.POSTGRES_PASSWORD }}
        run: psql -h localhost -U $POSTGRES_USER -d $POSTGRES_DB -f datenmanagement/sql/schema.sql
      - name: Run migrations
        run: python manage.py migrate
      - name: Run tests on app Accounts
        run: python manage.py test accounts
